// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bemdR
ComplexMatrix bemdR(ComplexVector input, NumericVector directions, double num_imfs, unsigned int num_siftings);
RcppExport SEXP _Rlibeemd_bemdR(SEXP inputSEXP, SEXP directionsSEXP, SEXP num_imfsSEXP, SEXP num_siftingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< double >::type num_imfs(num_imfsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_siftings(num_siftingsSEXP);
    rcpp_result_gen = Rcpp::wrap(bemdR(input, directions, num_imfs, num_siftings));
    return rcpp_result_gen;
END_RCPP
}
// ceemdanR
NumericMatrix ceemdanR(NumericVector input, double num_imfs, unsigned int ensemble_size, double noise_strength, unsigned int S_number, unsigned int num_siftings, unsigned long int rng_seed, int threads);
RcppExport SEXP _Rlibeemd_ceemdanR(SEXP inputSEXP, SEXP num_imfsSEXP, SEXP ensemble_sizeSEXP, SEXP noise_strengthSEXP, SEXP S_numberSEXP, SEXP num_siftingsSEXP, SEXP rng_seedSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type num_imfs(num_imfsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ensemble_size(ensemble_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type noise_strength(noise_strengthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type S_number(S_numberSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_siftings(num_siftingsSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type rng_seed(rng_seedSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ceemdanR(input, num_imfs, ensemble_size, noise_strength, S_number, num_siftings, rng_seed, threads));
    return rcpp_result_gen;
END_RCPP
}
// eemdR
NumericMatrix eemdR(NumericVector input, double num_imfs, unsigned int ensemble_size, double noise_strength, unsigned int S_number, unsigned int num_siftings, unsigned long int rng_seed, int threads);
RcppExport SEXP _Rlibeemd_eemdR(SEXP inputSEXP, SEXP num_imfsSEXP, SEXP ensemble_sizeSEXP, SEXP noise_strengthSEXP, SEXP S_numberSEXP, SEXP num_siftingsSEXP, SEXP rng_seedSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type num_imfs(num_imfsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ensemble_size(ensemble_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type noise_strength(noise_strengthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type S_number(S_numberSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_siftings(num_siftingsSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type rng_seed(rng_seedSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(eemdR(input, num_imfs, ensemble_size, noise_strength, S_number, num_siftings, rng_seed, threads));
    return rcpp_result_gen;
END_RCPP
}
// emd_num_imfsR
int emd_num_imfsR(unsigned int N);
RcppExport SEXP _Rlibeemd_emd_num_imfsR(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(emd_num_imfsR(N));
    return rcpp_result_gen;
END_RCPP
}
// extremaR
List extremaR(NumericVector x);
RcppExport SEXP _Rlibeemd_extremaR(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(extremaR(x));
    return rcpp_result_gen;
END_RCPP
}
// gslErrorHandlerOff
void gslErrorHandlerOff();
RcppExport SEXP _Rlibeemd_gslErrorHandlerOff() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gslErrorHandlerOff();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rlibeemd_bemdR", (DL_FUNC) &_Rlibeemd_bemdR, 4},
    {"_Rlibeemd_ceemdanR", (DL_FUNC) &_Rlibeemd_ceemdanR, 8},
    {"_Rlibeemd_eemdR", (DL_FUNC) &_Rlibeemd_eemdR, 8},
    {"_Rlibeemd_emd_num_imfsR", (DL_FUNC) &_Rlibeemd_emd_num_imfsR, 1},
    {"_Rlibeemd_extremaR", (DL_FUNC) &_Rlibeemd_extremaR, 1},
    {"_Rlibeemd_gslErrorHandlerOff", (DL_FUNC) &_Rlibeemd_gslErrorHandlerOff, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rlibeemd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
